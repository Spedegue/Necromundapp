// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model House {
  name                      String                      @id @unique
  isOutlander               Boolean                     @default(false)
  Gang                      Gang[]
  HouseWeaponList           HouseRangedWeaponList[]
  HouseUnitType             HouseUnitType[]
  HouseHandToHandWeaponList HouseHandToHandWeaponList[]
  HouseAmmoList             HouseAmmoList[]
  HouseEquipmentList        HouseEquipmentList[]
}

model UnitType {
  name           String       @id @unique
  unitCategoryId String
  cost           Int
  baseStats      Json
  maxStats       Json
  startingXp     String
  minQuantity    Int?
  maxQuantity    Int?
  minPercent     Int?
  maxPercent     Int?
  unit           Unit[]
  unitCategory   UnitCategory @relation(fields: [unitCategoryId], references: [id])
}

model UnitCategory {
  id            String          @id
  HouseUnitType HouseUnitType[]
  UnitType      UnitType[]
}

model HouseUnitType {
  houseId        String
  unitCategoryId String
  house          House        @relation(fields: [houseId], references: [name])
  unitCategory   UnitCategory @relation(fields: [unitCategoryId], references: [id])

  @@id([houseId, unitCategoryId])
}

model SkillList {
  id            Int             @id @default(autoincrement())
  agility       Boolean?
  combat        Boolean?
  ferocity      Boolean?
  muscle        Boolean?
  shooting      Boolean?
  stealth       Boolean?
  techno        Boolean?
  UnitSkillList UnitSkillList[]
}

model UnitSkillList {
  id          Int       @id @default(autoincrement())
  skillListId Int
  skillList   SkillList @relation(fields: [skillListId], references: [id])
}

// model HouseSkillList {
//   id    String   @id @default(autoincrement())
//   house House @relation(fields: [id], references: [id])
//   list  Json
// }

model SkillType {
  id    String  @id
  Skill Skill[]
}

model Skill {
  id          Int       @id @default(autoincrement())
  name        String
  roll        Int
  skillTypeId String
  skillType   SkillType @relation(fields: [skillTypeId], references: [id])
}

model Territory {
  id     Int    @id @default(autoincrement())
  name   String
  // Dice parser
  income String
}

model HouseRangedWeaponList {
  houseId    String       @id
  price      Int
  weaponId   Int
  leaderOnly Boolean      @default(false)
  weapon     RangedWeapon @relation(fields: [weaponId], references: [id])
  house      House        @relation(fields: [houseId], references: [name])
}

model HouseHandToHandWeaponList {
  houseId    String           @id
  price      Int
  weaponId   Int
  leaderOnly Boolean          @default(false)
  weapon     HandToHandWeapon @relation(fields: [weaponId], references: [id])
  house      House            @relation(fields: [houseId], references: [name])
}

model HouseAmmoList {
  houseId    String  @id
  price      Int
  ammoId     Int
  leaderOnly Boolean @default(false)
  ammo       Ammo    @relation(fields: [ammoId], references: [id])
  house      House   @relation(fields: [houseId], references: [name])
}

model HouseEquipmentList {
  houseId     String    @id
  price       Int
  equipmentId Int
  leaderOnly  Boolean   @default(false)
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  house       House     @relation(fields: [houseId], references: [name])
}

model WeaponType {
  name             String             @id @unique
  RangedWeapon     RangedWeapon[]
  HandToHandWeapon HandToHandWeapon[]
}

model Ammo {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  shortRange        Int
  longRange         Int
  longModifier      Int             @default(0)
  shortModifier     Int             @default(0)
  strength          Int
  // Dice parser
  damage            String
  saveModifier      Int             @default(0)
  ammoRoll          Int
  weaponId          Int?
  isThrowable       Boolean         @default(false)
  weapon            RangedWeapon?   @relation(fields: [weaponId], references: [id])
  default           Boolean?        @default(true)
  template          String?
  sustainedFireDice Int             @default(0)
  AmmoSpecial       AmmoSpecial[]
  HouseAmmoList     HouseAmmoList[]
  UnitAmmo          UnitAmmo[]
}

model RangedWeapon {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  weaponTypeId          String
  weaponType            WeaponType              @relation(fields: [weaponTypeId], references: [name])
  ammo                  Ammo[]
  HouseRangedWeaponList HouseRangedWeaponList[]
  UnitRangedWeapon      UnitRangedWeapon[]
}

model HandToHandWeapon {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique
  // Integrate with dice roll parser
  strength                  String
  damage                    String
  saveModifier              Int                         @default(0)
  weaponTypeId              String                      @default("Hand-to-Hand")
  weaponType                WeaponType                  @relation(fields: [weaponTypeId], references: [name])
  HandToHandWeaponSpecial   HandToHandWeaponSpecial[]
  HouseHandToHandWeaponList HouseHandToHandWeaponList[]
  UnitHandToHandWeapon      UnitHandToHandWeapon[]
}

model Equipment {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  equipmentTypeId    String
  equipmentType      EquipmentType        @relation(fields: [equipmentTypeId], references: [id])
  HouseEquipmentList HouseEquipmentList[]
  UnitEquipment      UnitEquipment[]
}

model EquipmentType {
  id        String      @id @unique
  Equipment Equipment[]
}

model SeriousInjury {
  // Injury chart Id? E.g. for shock maul, plague zombies etc.
  id   Int    @id
  name String
  //   TODO - useSeriousInjury hook
}

model Special {
  id                      Int                       @id @default(autoincrement())
  name                    String
  HandToHandWeaponSpecial HandToHandWeaponSpecial[]
  AmmoSpecial             AmmoSpecial[]
}

model HandToHandWeaponSpecial {
  specialId Int
  special   Special          @relation(fields: [specialId], references: [id])
  weaponId  Int
  weapon    HandToHandWeapon @relation(fields: [weaponId], references: [id])

  @@id([specialId, weaponId])
}

model AmmoSpecial {
  specialId Int
  special   Special @relation(fields: [specialId], references: [id])
  ammoId    Int
  ammo      Ammo    @relation(fields: [ammoId], references: [id])

  @@id([specialId, ammoId])
}

// Non-Fixed models

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userName  String   @unique
  Gang      Gang[]
}

model Game {
  id     Int        @id @default(autoincrement())
  status GameStatus
  state  Json
}

model GameUserRelation {
  id     Int  @id @default(autoincrement())
  gangId Int
  gang   Gang @relation(fields: [gangId], references: [id])
}

model Gang {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  houseId          String
  house            House              @relation(fields: [houseId], references: [name])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  GameUserRelation GameUserRelation[]
  Unit             Unit[]
}

model Unit {
  id                   Int                    @id @default(autoincrement())
  name                 String
  unitTypeId           String
  gangId               Int
  unitType             UnitType               @relation(fields: [unitTypeId], references: [name])
  gang                 Gang                   @relation(fields: [gangId], references: [id])
  UnitRangedWeapon     UnitRangedWeapon[]
  UnitHandToHandWeapon UnitHandToHandWeapon[]
  UnitAmmo             UnitAmmo[]
  UnitEquipment        UnitEquipment[]
}

model UnitRangedWeapon {
  id       Int          @id @default(autoincrement())
  unitId   Int
  weaponId Int
  weapon   RangedWeapon @relation(fields: [weaponId], references: [id])
  unit     Unit         @relation(fields: [unitId], references: [id])
}

model UnitHandToHandWeapon {
  id       Int              @id @default(autoincrement())
  unitId   Int
  weaponId Int
  weapon   HandToHandWeapon @relation(fields: [weaponId], references: [id])
  unit     Unit             @relation(fields: [unitId], references: [id])
}

model UnitAmmo {
  id     Int  @id @default(autoincrement())
  unitId Int
  ammoId Int
  ammo   Ammo @relation(fields: [ammoId], references: [id])
  unit   Unit @relation(fields: [unitId], references: [id])
}

model UnitEquipment {
  id          Int       @id @default(autoincrement())
  unitId      Int
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  unit        Unit      @relation(fields: [unitId], references: [id])
}

enum GameStatus {
  PENDING
  PREGAME
  ACTIVE
  PBS
  COMPLETE
}
