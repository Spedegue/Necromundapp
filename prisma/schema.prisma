// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model House {
  name               String               @id @unique
  isOutlander        Boolean              @default(false)
  Gang               Gang[]
  HouseUnitType      HouseUnitType[]
  HouseEquipmentList HouseEquipmentList[]
}

model UnitType {
  name           String       @id @unique
  unitCategoryId String
  cost           Int
  baseStats      Json
  maxStats       Json
  startingXp     String
  minQuantity    Int?
  maxQuantity    Int?
  minPercent     Int?
  maxPercent     Int?
  unit           Unit[]
  unitCategory   UnitCategory @relation(fields: [unitCategoryId], references: [id])
}

model UnitCategory {
  id            String          @id
  HouseUnitType HouseUnitType[]
  UnitType      UnitType[]
}

model HouseUnitType {
  houseId        String
  unitCategoryId String
  house          House        @relation(fields: [houseId], references: [name])
  unitCategory   UnitCategory @relation(fields: [unitCategoryId], references: [id])

  @@id([houseId, unitCategoryId])
}

model SkillList {
  id            Int             @id @default(autoincrement())
  agility       Boolean?
  combat        Boolean?
  ferocity      Boolean?
  muscle        Boolean?
  shooting      Boolean?
  stealth       Boolean?
  techno        Boolean?
  UnitSkillList UnitSkillList[]
}

model UnitSkillList {
  id          Int       @id @default(autoincrement())
  skillListId Int
  skillList   SkillList @relation(fields: [skillListId], references: [id])
}

// model HouseSkillList {
//   id    String   @id @default(autoincrement())
//   house House @relation(fields: [id], references: [id])
//   list  Json
// }

model SkillType {
  id    String  @id
  Skill Skill[]
}

model Skill {
  id          Int       @id @default(autoincrement())
  name        String
  roll        Int
  skillTypeId String
  skillType   SkillType @relation(fields: [skillTypeId], references: [id])
}

model Territory {
  id     Int    @id @default(autoincrement())
  name   String
  // Dice parser
  income String
}

model HouseEquipmentList {
  id          Int       @id @default(autoincrement())
  houseId     String
  price       String
  equipmentId Int
  leaderOnly  Boolean   @default(false)
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  house       House     @relation(fields: [houseId], references: [name])

  @@unique([houseId, equipmentId])
}

model EquipmentType {
  id        String      @id @unique
  Equipment Equipment[]
}

model Equipment {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  equipmentTypeId    String
  equipmentType      EquipmentType        @relation(fields: [equipmentTypeId], references: [id])
  UnitEquipment      UnitEquipment[]
  HouseEquipmentList HouseEquipmentList[]
  weaponAmmoAsAmmo   WeaponAmmo[]         @relation("ammo")
  weaponAmmoAsWeapon WeaponAmmo[]         @relation("weapon")
  handToHandStats    WeaponStats?
}

model WeaponAmmo {
  ammoId        Int
  ammo          Equipment   @relation("ammo", fields: [ammoId], references: [id])
  weaponId      Int
  weapon        Equipment   @relation("weapon", fields: [weaponId], references: [id])
  rangedStatsId Int
  rangedStats   RangedStats @relation(fields: [rangedStatsId], references: [id])
  default       Boolean     @default(true)

  @@id([ammoId, weaponId])
}

model WeaponStats {
  id           Int           @id @default(autoincrement())
  strength     String
  damage       String
  weaponId     Int?          @unique
  weapon       Equipment?    @relation(fields: [weaponId], references: [id])
  saveModifier Int           @default(0)
  RangedStats  RangedStats[]
}

model RangedStats {
  id                Int          @id @default(autoincrement())
  shortRange        String
  longRange         String
  longModifier      Int          @default(0)
  shortModifier     Int          @default(0)
  ammoRoll          Int
  weaponStatsId     Int
  weaponStats       WeaponStats  @relation(fields: [weaponStatsId], references: [id])
  default           Boolean?     @default(true)
  template          String?
  sustainedFireDice Int          @default(0)
  WeaponAmmo        WeaponAmmo[]
}

// model HandToHandStat {
//   id           Int    @id @default(autoincrement())
//   strength     String
//   damage       String
//   saveModifier Int    @default(0)
// }

model SeriousInjury {
  // Injury chart Id? E.g. for shock maul, plague zombies etc.
  id   Int    @id
  name String
}

model Special {
  id   Int    @id @default(autoincrement())
  name String
  // HandToHandWeaponSpecial HandToHandWeaponSpecial[]
}

//##############################################
//###############################
//               Non-Fixed models
// ##############################
// #############################################

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userName  String   @unique
  Gang      Gang[]
}

model Game {
  id     Int        @id @default(autoincrement())
  status GameStatus
  state  Json
}

model GameUserRelation {
  id     Int  @id @default(autoincrement())
  gangId Int
  gang   Gang @relation(fields: [gangId], references: [id])
}

model Gang {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  houseId          String
  house            House              @relation(fields: [houseId], references: [name])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  GameUserRelation GameUserRelation[]
  Unit             Unit[]
}

model Unit {
  id         Int      @id @default(autoincrement())
  name       String
  unitTypeId String
  gangId     Int
  unitType   UnitType @relation(fields: [unitTypeId], references: [name])
  gang       Gang     @relation(fields: [gangId], references: [id])

  UnitEquipment UnitEquipment[]
}

model UnitEquipment {
  id          Int       @id @default(autoincrement())
  unitId      Int
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  unit        Unit      @relation(fields: [unitId], references: [id])
}

enum GameStatus {
  PENDING
  PREGAME
  ACTIVE
  PBS
  COMPLETE
}
